{
  "projects": [
    {
      "id": 1,
      "title_kr": "운동드림",
      "title_en": "PRIME",
      "description": "프라임은 HTML, SCSS, JavaScript를 활용해 반응형 디자인을 구현하고, 로컬 스토리지를 통해 데이터를 효율적으로 처리하여 사용자에게 최적화된 쇼핑 경험을 제공하는 웹페이지입니다.",
      "type": "반응형",
      "skill": ["HTML", "SCSS", "JavaScript", "Netlify"],
      "feature": ["사용자 로그인 및 인증", "장바구니 및 결제", "주소 관리"],
      "contribution": "로컬스토리지를 활용한 카트창 구현과 반응형 웹디자인을 포함한 프론트엔드 개발을 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "HTML: 웹 페이지의 구조를 정의하여 사용자에게 콘텐츠를 명확하게 제공",
        "SCSS: 코드 재사용성과 유지보수를 위해 CSS를 확장하여 스타일링 작업을 효율적으로 구현",
        "JavaScript: 사용자와의 상호작용을 구현하고, 동적인 콘텐츠와 기능을 제공"
      ],
      "development_outcomes": [
        "CSS Sticky 활용: 고정 사이드 바를 통해 결제 정보의 접근성을 향상시킴",
        "검색 필터와 카테고리 세분화: 정보 탐색 시간을 단축하여 사용자 경험 개선",
        "옵션 변경 및 주소 수정 기능: 모달창을 활용해 페이지 전환 없이 작업이 가능하도록 구현",
        "레이아웃 최적화: 반응형 디자인을 적용하여 다양한 디바이스에서 일관된 사용자 경험 제공"
      ],
      "code_analysis": {
        "problem": "기본 주소 편집 시 defaultAddress와 addressList 간 동기화 로직이 누락되어, 상태가 일치하지 않는 문제가 발생",
        "solution": "사용자가 기본 주소를 편집하면 defaultAddress와 addressList를 동기화하고, 변경 사항이 없는 경우 업데이트를 생략하도록 로직을 최적화"
      },
      "limitations_and_improvements": [
        {
          "technology": "JavaScript",
          "limitation": "서버 없이 API 요청이 불가능해 외부 데이터를 동적으로 처리하거나 장바구니 데이터를 중앙에서 관리하기 어려움",
          "improvement": "JSON 파일을 GitHub Repository에 저장하고, 이를 fetch()를 사용해 읽어오는 방식으로 데이터를 초기화하거나 사용자 데이터를 업데이트하도록 구현"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/MOTIONPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primemain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primelogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primedetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primecart.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primeScreen.png",
      "github": "https://github.com/jisumoon/PRIME",
      "blog": "https://www.notion.so/PRIME-15536341b0a780518f1afa10b6565018?pvs=4",
      "deployment": "https://primejs.netlify.app",
      "category": "Team"
    },
    {
      "id": 2,
      "title_kr": "THREADS:SNS",
      "title_en": "PRIME",
      "description": "프라임은 HTML, SCSS, JavaScript를 활용해 반응형 디자인을 구현하고, 로컬 스토리지를 통해 데이터를 효율적으로 처리하여 사용자에게 최적화된 쇼핑 경험을 제공하는 웹페이지입니다.",
      "type": "반응형",
      "skill": ["HTML", "SCSS", "JavaScript", "Netlify"],
      "feature": ["사용자 로그인 및 인증", "장바구니 및 결제", "주소 관리"],
      "contribution": "로컬스토리지를 활용한 카트창 구현과 반응형 웹디자인을 포함한 프론트엔드 개발을 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "HTML: 웹 페이지의 구조를 정의하여 사용자에게 콘텐츠를 명확하게 제공",
        "SCSS: 코드 재사용성과 유지보수를 위해 CSS를 확장하여 스타일링 작업을 효율적으로 구현",
        "JavaScript: 사용자와의 상호작용을 구현하고, 동적인 콘텐츠와 기능을 제공"
      ],
      "development_outcomes": [
        "CSS Sticky 활용: 고정 사이드 바를 통해 결제 정보의 접근성을 향상시킴",
        "검색 필터와 카테고리 세분화: 정보 탐색 시간을 단축하여 사용자 경험 개선",
        "옵션 변경 및 주소 수정 기능: 모달창을 활용해 페이지 전환 없이 작업이 가능하도록 구현",
        "레이아웃 최적화: 반응형 디자인을 적용하여 다양한 디바이스에서 일관된 사용자 경험 제공"
      ],
      "code_analysis": {
        "problem": "기본 주소 편집 시 defaultAddress와 addressList 간 동기화 로직이 누락되어, 상태가 일치하지 않는 문제가 발생",
        "solution": "사용자가 기본 주소를 편집하면 defaultAddress와 addressList를 동기화하고, 변경 사항이 없는 경우 업데이트를 생략하도록 로직을 최적화"
      },
      "limitations_and_improvements": [
        {
          "technology": "JavaScript",
          "limitation": "서버 없이 API 요청이 불가능해 외부 데이터를 동적으로 처리하거나 장바구니 데이터를 중앙에서 관리하기 어려움",
          "improvement": "JSON 파일을 GitHub Repository에 저장하고, 이를 fetch()를 사용해 읽어오는 방식으로 데이터를 초기화하거나 사용자 데이터를 업데이트하도록 구현"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/THREADSPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primemain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primelogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primedetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primecart.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primeScreen.png",
      "github": "https://github.com/jisumoon/PRIME",
      "blog": "https://www.notion.so/PRIME-15536341b0a780518f1afa10b6565018?pvs=4",
      "deployment": "https://primejs.netlify.app",
      "category": "Team"
    },
    {
      "id": 3,
      "title_kr": "VIVAPLAY : 영화소개사이트",
      "title_en": "VIVAPLAY",
      "description": "VIVAPLAY는 TypeScript와 React를 활용해 TMDB API 데이터를 관리하고, 영화 검색과 배우 추천 기능을 제공하는 웹 페이지입니다",
      "type": "반응형",
      "skill": ["TypeScript", "React", "styled-component", "TMDB", "Netlify"],
      "feature": [
        "영화 검색 및 필터링",
        "즐겨찾기 및 배우 추천",
        "사용자 암호 해시화",
        "반응형 디자인 구현"
      ],
      "contribution": "메인 디자인, TMDB를 활용한 인기 검색어와 검색 페이지, 공통 헤더 및 푸터 컴포넌트 담당",
      "problem_solving": "TMDB API 데이터를 로컬 스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 즐겨찾기와 배우 추천 기능으로 사용자 경험을 개선",
      "achievement": "TMDB API를 활용한 데이터 관리와 반응형 웹 디자인을 통해 직관적이고 개인화된 영화 검색 및 추천 경험을 제공",
      "key_features": [
        "TypeScript: 코드의 안정성과 유지보수성을 높이고, 명확한 데이터 타입을 정의하여 오류를 최소화",
        "React: 컴포넌트 기반 설계로 UI와 주요 기능을 모듈화하여 효율적인 개발 진행",
        "styled-components: CSS-in-JS 방식을 사용해 동적 스타일링과 유지보수성을 개선",
        "Netlify: 간편한 배포와 CI/CD 환경 설정으로 안정적인 서비스 제공"
      ],
      "development_outcomes": [
        "로컬 스토리지 활용: 즐겨찾기 데이터를 저장하여 사용자 경험 향상",
        "검색 필터 및 데이터 연동: TMDB API 데이터를 기반으로 영화 검색과 필터링 기능 구현",
        "UI/UX 최적화: 반응형 디자인 적용으로 다양한 디바이스에서 일관된 사용자 경험 제공",
        "헤더와 푸터 컴포넌트 제작: 공통 요소를 효율적으로 관리하여 코드 재사용성 강화"
      ],
      "code_analysis": {
        "problem": "React 상태와 로컬 스토리지 간 동기화가 제대로 이루어지지 않아 초기 상태가 불일치하고, 상태 변경 시 데이터 손실 발생",
        "solution": "React 상태와 로컬 스토리지를 `useState`와 `useEffect`를 활용해 동기화하여 데이터 일관성을 유지"
      },
      "limitations_and_improvements": [
        {
          "technology": "TMDB API",
          "limitation": "API 호출 횟수 제한으로 대량 데이터 요청 시 성능 저하 발생 가능",
          "improvement": "추후 데이터 캐싱을 도입하고, React Query와 같은 상태 관리 도구를 활용하여 API 호출 빈도를 줄이고 성능을 최적화할 계획"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/VIVAPLAYPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayMain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayLogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplaydetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplaySearch.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayLove.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/vivaplayScreen.png",
      "github": "https://github.com/jisumoon/VIVAPLAY",
      "blog": "https://www.notion.so/VIVAPLAY-16536341b0a78009984cf30bcdd3a9ba?pvs=4",
      "deployment": "https://vivaplayjs.netlify.app/",
      "category": "Team"
    },
    {
      "id": 4,
      "title_kr": "PRIME 쇼핑몰",
      "title_en": "PRIME",
      "description": "프라임은 HTML, SCSS, JavaScript를 활용해 반응형 디자인을 구현하고, 로컬 스토리지를 통해 데이터를 효율적으로 처리하여 사용자에게 최적화된 쇼핑 경험을 제공하는 웹페이지입니다.",
      "type": "반응형",
      "skill": ["HTML", "SCSS", "JavaScript", "Netlify"],
      "feature": ["사용자 로그인 및 인증", "장바구니 및 결제", "주소 관리"],
      "contribution": "로컬스토리지를 활용한 카트창 구현과 반응형 웹디자인을 포함한 프론트엔드 개발을 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "HTML: 웹 페이지의 구조를 정의하여 사용자에게 콘텐츠를 명확하게 제공",
        "SCSS: 코드 재사용성과 유지보수를 위해 CSS를 확장하여 스타일링 작업을 효율적으로 구현",
        "JavaScript: 사용자와의 상호작용을 구현하고, 동적인 콘텐츠와 기능을 제공"
      ],
      "development_outcomes": [
        "CSS Sticky 활용: 고정 사이드 바를 통해 결제 정보의 접근성을 향상시킴",
        "검색 필터와 카테고리 세분화: 정보 탐색 시간을 단축하여 사용자 경험 개선",
        "옵션 변경 및 주소 수정 기능: 모달창을 활용해 페이지 전환 없이 작업이 가능하도록 구현",
        "레이아웃 최적화: 반응형 디자인을 적용하여 다양한 디바이스에서 일관된 사용자 경험 제공"
      ],
      "code_analysis": {
        "problem": "기본 주소 편집 시 defaultAddress와 addressList 간 동기화 로직이 누락되어, 상태가 일치하지 않는 문제가 발생",
        "solution": "사용자가 기본 주소를 편집하면 defaultAddress와 addressList를 동기화하고, 변경 사항이 없는 경우 업데이트를 생략하도록 로직을 최적화"
      },
      "limitations_and_improvements": [
        {
          "technology": "JavaScript",
          "limitation": "서버 없이 API 요청이 불가능해 외부 데이터를 동적으로 처리하거나 장바구니 데이터를 중앙에서 관리하기 어려움",
          "improvement": "JSON 파일을 GitHub Repository에 저장하고, 이를 fetch()를 사용해 읽어오는 방식으로 데이터를 초기화하거나 사용자 데이터를 업데이트하도록 구현"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/PRIMEPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primemain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primelogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primedetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primecart.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primeScreen.png",
      "github": "https://github.com/jisumoon/PRIME",
      "blog": "https://www.notion.so/PRIME-15536341b0a780518f1afa10b6565018?pvs=4",
      "deployment": "https://primejs.netlify.app",
      "category": "Team"
    },
    {
      "id": 5,
      "title_kr": "프로젝트 이름 4",
      "title_en": "Project Name 4",
      "description": "Python과 Django를 사용하여 사용자 데이터를 분석하고 보고서를 생성하는 웹 애플리케이션입니다.",
      "type": "반응형",
      "skill": ["Python", "Django", "PostgreSQL"],
      "features": "데이터 분석, 보고서 생성, 사용자 관리",
      "contribution": "백엔드 개발 및 데이터 시각화 API 구축",
      "problem_solving": "대용량 데이터 처리를 위해 캐싱 메커니즘을 도입",
      "achievement": "보고서 생성 시간을 50% 단축하고 사용자 데이터를 효율적으로 관리",
      "key_features": [
        "Python 기반 데이터 분석 및 시각화",
        "사용자별 보고서 자동 생성 기능",
        "PostgreSQL 데이터베이스 최적화"
      ],
      "development_outcomes": [
        "보고서 생성 시간 50% 단축",
        "사용자 데이터 관리의 효율성 향상",
        "Django REST Framework로 API 성능 개선"
      ],
      "code_analysis": {
        "problem": "데이터베이스 연결 과부하",
        "solution": "비동기 작업 처리와 캐싱을 통한 부하 감소"
      },
      "img": "/images/project4.png",
      "github": "https://github.com/your-repo/project4",
      "blog": "https://your-blog.com/project4",
      "deployment": "https://your-project4.com",
      "category": "Single"
    },
    {
      "id": 6,
      "title_kr": "프로젝트 이름 5",
      "title_en": "Project Name 5",
      "description": "머신러닝 모델을 활용한 이미지 분류 시스템입니다.",
      "type": "모바일형",
      "skill": ["Python", "TensorFlow", "Flask"],
      "features": "이미지 업로드, 분류 결과 제공, 모델 학습",
      "contribution": "머신러닝 모델 학습 및 API 설계",
      "problem_solving": "학습 데이터 부족 문제 해결을 위해 데이터 증강 기법 적용",
      "achievement": "이미지 분류 정확도를 90% 이상으로 향상",
      "key_features": [
        "TensorFlow 기반 이미지 분류 모델 학습",
        "Flask로 모델 API 구현",
        "데이터 증강을 통한 학습 데이터 증가"
      ],
      "development_outcomes": [
        "이미지 분류 정확도를 90% 이상으로 향상",
        "API 응답 속도 개선 및 클라이언트 신뢰도 상승",
        "머신러닝 모델 경량화로 실행 속도 개선"
      ],
      "code_analysis": {
        "problem": "모델 예측 속도가 느림",
        "solution": "모델 경량화 및 GPU 최적화"
      },
      "img": "/images/project5.png",
      "github": "https://github.com/your-repo/project5",
      "blog": "https://your-blog.com/project5",
      "deployment": "https://your-project5.com",
      "category": "Single"
    }
  ]
}
