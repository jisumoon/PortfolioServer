{
  "projects": [
    {
      "id": 1,
      "title_kr": "운동드림",
      "title_en": "PRIME",
      "description": "프라임은 HTML, SCSS, JavaScript를 활용해 반응형 디자인을 구현하고, 로컬 스토리지를 통해 데이터를 효율적으로 처리하여 사용자에게 최적화된 쇼핑 경험을 제공하는 웹페이지입니다.",
      "type": "반응형",
      "skill": ["HTML", "SCSS", "JavaScript", "Netlify"],
      "feature": ["사용자 로그인 및 인증", "장바구니 및 결제", "주소 관리"],
      "contribution": "로컬스토리지를 활용한 카트창 구현과 반응형 웹디자인을 포함한 프론트엔드 개발을 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "HTML: 웹 페이지의 구조를 정의하여 사용자에게 콘텐츠를 명확하게 제공",
        "SCSS: 코드 재사용성과 유지보수를 위해 CSS를 확장하여 스타일링 작업을 효율적으로 구현",
        "JavaScript: 사용자와의 상호작용을 구현하고, 동적인 콘텐츠와 기능을 제공"
      ],
      "development_outcomes": [
        "CSS Sticky 활용: 고정 사이드 바를 통해 결제 정보의 접근성을 향상시킴",
        "검색 필터와 카테고리 세분화: 정보 탐색 시간을 단축하여 사용자 경험 개선",
        "옵션 변경 및 주소 수정 기능: 모달창을 활용해 페이지 전환 없이 작업이 가능하도록 구현",
        "레이아웃 최적화: 반응형 디자인을 적용하여 다양한 디바이스에서 일관된 사용자 경험 제공"
      ],
      "code_analysis": {
        "problem": "기본 주소 편집 시 defaultAddress와 addressList 간 동기화 로직이 누락되어, 상태가 일치하지 않는 문제가 발생",
        "solution": "사용자가 기본 주소를 편집하면 defaultAddress와 addressList를 동기화하고, 변경 사항이 없는 경우 업데이트를 생략하도록 로직을 최적화"
      },
      "limitations_and_improvements": [
        {
          "technology": "JavaScript",
          "limitation": "서버 없이 API 요청이 불가능해 외부 데이터를 동적으로 처리하거나 장바구니 데이터를 중앙에서 관리하기 어려움",
          "improvement": "JSON 파일을 GitHub Repository에 저장하고, 이를 fetch()를 사용해 읽어오는 방식으로 데이터를 초기화하거나 사용자 데이터를 업데이트하도록 구현"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/MOTIONPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primemain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primelogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primedetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primecart.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primeScreen.png",
      "github": "https://github.com/jisumoon/PRIME",
      "blog": "https://www.notion.so/PRIME-15536341b0a780518f1afa10b6565018?pvs=4",
      "deployment": "https://primejs.netlify.app",
      "category": "Team"
    },
    {
      "id": 2,
      "title_kr": "THREADS:SNS",
      "title_en": "THREADS",
      "description": "THREADS는 React, styled-components, Firebase를 기반으로 한 SNS 플랫폼으로, 현대적인 인터페이스와 소셜 기능을 통해 사용자들이 자유롭게 게시글을 작성하고 상호작용할 수 있도록 설계된 웹페이지입니다.",
      "type": "반응형",
      "skill": ["React", "styled-component", "firebase", "Netlify"],
      "feature": [
        "사용자 로그인 및 인증",
        "게시글 작성 및 관리",
        "검색 및 탐색"
      ],
      "contribution": "음성 검색, 검색어 필터링, 활동 내역 기록 기능을 통해 사용자 경험을 강화하는 검색 기능을 설계하고 구현 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "React & Styled-Components: 컴포넌트 기반 설계와 스타일링을 통해 유지보수성과 확장성을 갖춘 인터페이스 구현",
        "Firebase: 실시간 데이터베이스와 인증 기능을 활용해 안전하고 빠른 데이터 관리와 사용자 인증 제공",
        "Voice Recognition (NPM): 음성 입력 기능을 구현하여 사용자가 더욱 직관적이고 편리하게 Threads를 탐색할 수 있도록 지원"
      ],
      "development_outcomes": [
        "음성 입력 기능 구현: 음성 인식을 도입해 사용자가 키보드 입력 없이 손쉽게 검색할 수 있도록 지원",
        "데이터 실시간 동기화: Firebase를 이용해 안정적이고 빠른 데이터 처리 및 사용자 인증 지원",
        "검색 필터 세분화: 다양한 카테고리로 검색 결과를 정확히 제공해 정보 탐색 시간을 단축"
      ],
      "code_analysis": {
        "problem": "FollowerContain의 onClick 이벤트는 프로필 페이지로 이동하는 onProfileClick을 호출하고, FollowerButton의 onClick 이벤트는 팔로우 상태를 토글하는 toggleFollow를 호출함함. 그러나 FollowerButton을 클릭할 때 상위 요소인 FollowerContain의 클릭 이벤트도 실행되어, 의도치 않게 프로필 페이지로 이동하는 문제가 발생",
        "solution": "FollowerButton의 onClick 이벤트 핸들러에 e.stopPropagation()을 추가하여 클릭 이벤트가 상위 요소(FollowerContain)로 전달되지 않도록 차단함함. 이를 통해 FollowerButton을 클릭할 때 팔로우 상태만 토글되고, 프로필 페이지로의 의도치 않은 이동을 방지"
      },
      "limitations_and_improvements": [
        {
          "technology": "Firebase",
          "limitation": "서버와의 통신 없이 데이터를 실시간으로 처리하거나 상태를 동기화하는 데 제약이 있었음",
          "improvement": "Firebase를 도입해 실시간 데이터 동기화와 사용자 인증 기능을 구현하여 안정적인 데이터 처리가 가능하도록 개선"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/THREADSPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/threads/threadsmain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub//threads/threadssignup.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub//threads/threadswrite.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub//threads/threadsserach.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub//threads/threadsprofile.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub//threads/threadsmain.png",
      "github": "https://github.com/jisumoon/THREADS",
      "blog": "https://www.notion.so/THREADS-SNS-13436341b0a780e7a44eec191db51237?pvs=4",
      "deployment": "https://threadsjs.netlify.app/",
      "category": "Team"
    },
    {
      "id": 3,
      "title_kr": "VIVAPLAY : 영화소개사이트",
      "title_en": "VIVAPLAY",
      "description": "VIVAPLAY는 TypeScript를 활용해 TMDB API 데이터를 관리하고, 영화 검색과 즐겨찾기 기능을 제공하는 웹 페이지입니다",
      "type": "반응형",
      "skill": ["TypeScript", "React", "styled-component", "TMDB", "Netlify"],
      "feature": [
        "영화 검색 및 필터링",
        "즐겨찾기",
        "사용자 암호 해시화",
        "반응형 디자인 구현"
      ],
      "contribution": "TMDB를 활용해 인기 검색어 및 검색 페이지를 제작하고, 메인 디자인과 공통 헤더·푸터 컴포넌트를 설계 및 구현",
      "problem_solving": "TMDB API 데이터를 로컬 스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 즐겨찾기 기능으로 사용자 경험을 개선",
      "achievement": "TMDB API를 활용한 데이터 관리와 반응형 웹 디자인을 통해 직관적이고 개인화된 영화 검색 및 추천 경험을 제공",
      "key_features": [
        "TypeScript: 코드의 안정성과 유지보수성을 높이고, 명확한 데이터 타입을 정의하여 오류를 최소화",
        "styled-components: CSS-in-JS 방식을 사용해 동적 스타일링과 유지보수성을 개선",
        "Netlify: 간편한 배포와 CI/CD 환경 설정으로 안정적인 서비스 제공"
      ],
      "development_outcomes": [
        "Recoil을 활용한 상태 관리: 로그인 상태를 전역적으로 관리하여 사용자 인증 및 상태 동기화를 효율적으로 구현",
        "로컬 스토리지 활용 및 보안 강화: 즐겨찾기와 사용자 데이터를 저장해 새로고침 시에도 데이터 유지를 보장하며, 비밀번호를 해시화하여 보안성을 높이고 안전한 사용자 인증 환경 제공",
        "검색 필터 및 데이터 연동: TMDB API 데이터를 기반으로 영화 검색과 필터링 기능을 구현하여 사용자 맞춤형 검색 제공",
        "UI/UX 최적화: 반응형 디자인 적용으로 다양한 디바이스에서 일관된 사용자 경험을 제공"
      ],
      "code_analysis": {
        "problem": "모바일에서 로그아웃 시 localStorage 데이터는 삭제되지만, PC나 다른 브라우저 탭에서 로그아웃 상태가 반영되지 않음",
        "solution": "storage 이벤트 리스너와 사용자 정의 이벤트(user-logout)를 추가해 브라우저 탭 간 및 동일 탭 내 상태 동기화를 구현"
      },
      "limitations_and_improvements": [
        {
          "technology": "TMDB API",
          "limitation": "API 데이터가 미국 등급 중심으로 제공되어 한국식 연령 등급으로 변환하는 과정에서 데이터 매핑 오류 발생 가능",
          "improvement": "API 데이터를 처리하는 로직을 리팩토링하여 연령 등급 변환 과정을 체계적으로 관리하고, 테스트를 통해 변환 오류를 줄일 예정"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/VIVAPLAYPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayMain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayLogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplaydetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplaySearch.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayLove.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/vivaplay/vivaplayScreen.png",
      "github": "https://github.com/jisumoon/VIVAPLAY",
      "blog": "https://www.notion.so/VIVAPLAY-16536341b0a78009984cf30bcdd3a9ba?pvs=4",
      "deployment": "https://vivaplayjs.netlify.app/",
      "category": "Team"
    },
    {
      "id": 4,
      "title_kr": "PRIME 쇼핑몰",
      "title_en": "PRIME",
      "description": "프라임은 HTML, SCSS, JavaScript를 활용해 반응형 디자인을 구현하고, 로컬 스토리지를 통해 데이터를 효율적으로 처리하여 사용자에게 최적화된 쇼핑 경험을 제공하는 웹페이지입니다.",
      "type": "반응형",
      "skill": ["HTML", "SCSS", "JavaScript", "Netlify"],
      "feature": ["사용자 로그인 및 인증", "장바구니 및 결제", "주소 관리"],
      "contribution": "로컬스토리지를 활용한 카트창 구현과 반응형 웹디자인을 포함한 프론트엔드 개발을 담당",
      "problem_solving": "API 응답 데이터를 로컬스토리지에 저장해 새로고침 시 데이터 손실 문제를 해결하고, 사용자 경험을 개선",
      "achievement": "검색 필터 세분화와 반응형 웹디자인을 통해 쇼핑 경험을 개선하고, UI/UX를 직관적이고 간소화하여 쇼핑 편의성을 향상.",
      "key_features": [
        "HTML: 웹 페이지의 구조를 정의하여 사용자에게 콘텐츠를 명확하게 제공",
        "SCSS: 코드 재사용성과 유지보수를 위해 CSS를 확장하여 스타일링 작업을 효율적으로 구현",
        "JavaScript: 사용자와의 상호작용을 구현하고, 동적인 콘텐츠와 기능을 제공"
      ],
      "development_outcomes": [
        "CSS Sticky 활용: 고정 사이드 바를 통해 결제 정보의 접근성을 향상시킴",
        "검색 필터와 카테고리 세분화: 정보 탐색 시간을 단축하여 사용자 경험 개선",
        "옵션 변경 및 주소 수정 기능: 모달창을 활용해 페이지 전환 없이 작업이 가능하도록 구현",
        "레이아웃 최적화: 반응형 디자인을 적용하여 다양한 디바이스에서 일관된 사용자 경험 제공"
      ],
      "code_analysis": {
        "problem": "기본 주소 편집 시 defaultAddress와 addressList 간 동기화 로직이 누락되어, 상태가 일치하지 않는 문제가 발생",
        "solution": "사용자가 기본 주소를 편집하면 defaultAddress와 addressList를 동기화하고, 변경 사항이 없는 경우 업데이트를 생략하도록 로직을 최적화"
      },
      "limitations_and_improvements": [
        {
          "technology": "JavaScript",
          "limitation": "서버 없이 API 요청이 불가능해 외부 데이터를 동적으로 처리하거나 장바구니 데이터를 중앙에서 관리하기 어려움",
          "improvement": "JSON 파일을 GitHub Repository에 저장하고, 이를 fetch()를 사용해 읽어오는 방식으로 데이터를 초기화하거나 사용자 데이터를 업데이트하도록 구현"
        }
      ],
      "mainImg": "https://jisumoon.github.io/PortfolioServer/img/main/PRIMEPOST.png",
      "img": [
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primemain.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primelogin.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primedetail.png",
        "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primecart.png"
      ],
      "screen": "https://jisumoon.github.io/PortfolioServer/img/sub/prime/primeScreen.png",
      "github": "https://github.com/jisumoon/PRIME",
      "blog": "https://www.notion.so/PRIME-15536341b0a780518f1afa10b6565018?pvs=4",
      "deployment": "https://primejs.netlify.app",
      "category": "Team"
    },
    {
      "id": 5,
      "title_kr": "Q&A 다이어리",
      "title_en": "Q&A Diary",
      "description": "Firebase와 TypeScript를 기반으로 개발된 질문 기반 다이어리 서비스로, 실시간 데이터 처리와 사용자 맞춤형 경험을 제공합니다.",
      "type": "반응형 웹 애플리케이션",
      "skills": ["TypeScript", "Firebase", "Styled-components"],
      "features": [
        "사용자 인증 및 비밀번호 재설정",
        "질문 기반 데이터 필터링",
        "실시간 데이터 업데이트"
      ],
      "contribution": "React 컴포넌트와 Styled-components를 활용해 반응형 UI를 설계. 프로젝트 내 Context를 통해 전역 상태 관리 구현.",
      "problem_solving": "새로고침 및 재로그인 후에도 다이어리 내용을 유지하기 위해 Context를 활용하여 props 전달 문제 해결.",
      "achievement": "실시간 데이터베이스와 사용자 인증 시스템 구현. 음력 변환 기능과 날짜 기반의 직관적인 캘린더 UI 제공.",
      "key_features": [
        "React 컴포넌트 기반 설계로 UI 재사용성 극대화",
        "TypeScript를 통한 정적 타입 체크로 코드 안정성 확보",
        "Lunar.js를 활용한 음력 변환 및 날짜 기반 처리"
      ],
      "development_outcomes": [
        "질문 기반 필터링과 음력 지원으로 사용자 맞춤형 경험 제공",
        "Firebase를 활용한 실시간 데이터 업데이트와 간소화된 인증 시스템 구현",
        "React와 Styled-components를 통해 확장성과 유지보수성을 갖춘 UI 설계"
      ],
      "code_analysis": {
        "problem": "다수 props로 인해 발생한 상태 관리 문제",
        "solution": "프로젝트 내 Context 활용으로 상태 관리 간소화 및 데이터 유지"
      },
      "images": {
        "main": "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarymain.png",
        "sub": [
          "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarymain.png",
          "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarylogin.png",
          "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarypassword.png",
          "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarysignup.png",
          "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarylist.png"
        ]
      },
      "preview_image": "https://jisumoon.github.io/PortfolioServer/img/sub/diary/qadiarymain.png",
      "links": {
        "github": "https://github.com/jisumoon/Q-ADIARY",
        "blog": "https://www.notion.so/Q-A-17336341b0a780cea1b7e0ab3937a45d?pvs=4",
        "deployment": "https://677bc6f650301ff76a22026e--qadiaryjs.netlify.app/"
      },
      "category": "Single"
    },

    {
      "id": 6,
      "title_kr": "Q&A 다이어리",
      "title_en": "Q&A Diary",
      "description": "머신러닝 모델을 활용한 이미지 분류 시스템입니다.",
      "type": "모바일형",
      "skill": ["Python", "TensorFlow", "Flask"],
      "features": "이미지 업로드, 분류 결과 제공, 모델 학습",
      "contribution": "머신러닝 모델 학습 및 API 설계",
      "problem_solving": "학습 데이터 부족 문제 해결을 위해 데이터 증강 기법 적용",
      "achievement": "이미지 분류 정확도를 90% 이상으로 향상",
      "key_features": [
        "TensorFlow 기반 이미지 분류 모델 학습",
        "Flask로 모델 API 구현",
        "데이터 증강을 통한 학습 데이터 증가"
      ],
      "development_outcomes": [
        "이미지 분류 정확도를 90% 이상으로 향상",
        "API 응답 속도 개선 및 클라이언트 신뢰도 상승",
        "머신러닝 모델 경량화로 실행 속도 개선"
      ],
      "code_analysis": {
        "problem": "모델 예측 속도가 느림",
        "solution": "모델 경량화 및 GPU 최적화"
      },
      "img": "/images/project5.png",
      "github": "https://github.com/your-repo/project5",
      "blog": "https://your-blog.com/project5",
      "deployment": "https://your-project5.com",
      "category": "Single"
    }
  ]
}
